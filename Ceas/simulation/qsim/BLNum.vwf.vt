// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2023 01:18:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BLNum
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BLNum_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Ck;
reg Reset;
reg SetHH;
reg SetHL;
reg SetMH;
reg SetML;
// wires                                               
wire [3:0] uH;
wire [3:0] uM;
wire [3:0] uS;
wire [1:0] zH;
wire [2:0] zM;
wire [2:0] zS;

// assign statements (if any)                          
BLNum i1 (
// port map - connection between master ports and signals/registers   
	.Ck(Ck),
	.Reset(Reset),
	.SetHH(SetHH),
	.SetHL(SetHL),
	.SetMH(SetMH),
	.SetML(SetML),
	.uH(uH),
	.uM(uM),
	.uS(uS),
	.zH(zH),
	.zM(zM),
	.zS(zS)
);
initial 
begin 
#100000000 $finish;
end 

// Ck
always
begin
	Ck = 1'b0;
	Ck = #2500 1'b1;
	#2500;
end 

// Reset
initial
begin
	Reset = 1'b1;
end 

// SetHH
initial
begin
	SetHH = 1'b1;
end 

// SetHL
initial
begin
	SetHL = 1'b0;
end 

// SetMH
initial
begin
	SetMH = 1'b1;
end 

// SetML
initial
begin
	SetML = 1'b0;
end 
endmodule

